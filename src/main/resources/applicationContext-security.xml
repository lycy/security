<beans:beans xmlns="http://www.springframework.org/schema/security"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-4.2.xsd">

    <!--<security:http auto-config="true">-->
        <!--<security:form-login login-page="/pages/login.jsp"-->
                             <!--login-processing-url="/login.do"-->
                             <!--username-parameter="username"-->
                             <!--password-parameter="password"-->
                             <!--authentication-failure-url="/pages/login_failure.jsp"-->
                             <!--default-target-url="/index"-->
                             <!--authentication-success-handler-ref="authSuccess"-->
        <!--/>-->
        <!--&lt;!&ndash; 表示匿名用户可以访问  登录页与登录失败页不需要登录&ndash;&gt;-->
        <!--<security:intercept-url pattern="/pages/login*.jsp" access="hasRole('ROLE_ANONYMOUS')"/>-->

        <!--<security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>-->
    <!--</security:http>-->
    <!---->

    <!--&lt;!&ndash; 认证成功后的处理类 &ndash;&gt;-->
    <!--<bean id="authSuccess" class="com.yws.security.handler.AuthenticationSuccessHandlerImpl"/>-->


    <!--&lt;!&ndash; 表示匿名用户可以访问 &ndash;&gt;-->
    <!--&lt;!&ndash;<security:http security="none" pattern="/login.html" />&ndash;&gt;-->



    <!--&lt;!&ndash;-->
    <!--1. auto-config=”true” 时,Spring Security 有默认登陆页-->
    <!--2. intercept-url 定义了一个权限控制的规则。pattern 属性表示我们将对哪些 url 进行权限控制，-->
    <!--其也可以是一个正则表达式，如上的写法表示我们将对所有的 URL 进行权限控制；-->
    <!--access 属性表示在请求对应的 URL 时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表-->
    <!--，请求的用户只需拥有其中的一个角色就能成功访问对应的 URL。-->
    <!--这里的 “ROLE_USER” 表示请求的用户应当具有 ROLEUSER 角色 &ndash;&gt;-->

    <!--<security:authentication-manager>-->
        <!--<security:authentication-provider>-->
            <!--<security:user-service>-->
                <!--<security:user name="user" password="user" authorities="ROLE_USER"/>-->
                <!--<security:user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN"/>-->
            <!--</security:user-service>-->
        <!--</security:authentication-provider>-->
    <!--</security:authentication-manager>-->
    <!--&lt;!&ndash;authentication-manager 元素指定了一个 AuthenticationManager，-->
    <!--其需要一个 AuthenticationProvider（对应 authentication-provider 元素）来进行真正的认证，-->
    <!--默认情况下 authentication-provider 对应一个 DaoAuthenticationProvider，-->
    <!--其需要 UserDetailsService（对应 user-service 元素）来获取用户信息 UserDetails（对应 user 元素）&ndash;&gt;-->


    <http pattern="/login*" security="none" />
    <!--<http pattern="/login.do" security="none" />-->
    <http auto-config="true">
        <csrf disabled="true"/>
        <intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
        <access-denied-handler ref="accessDeniedHandler" />
        <form-login login-page="/login"
        username-parameter="username"
        password-parameter="password"
        login-processing-url="/formLogin"
        default-target-url="/index"
                    always-use-default-target="true"
        authentication-failure-url="/loginError"
        />
        <session-management>
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="false"/>
        </session-management>
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
    </http>

    <beans:bean id="authSuccess" class="com.yws.security.handler.AuthenticationSuccessHandlerImpl"/>

    <!-- 自定义权限不足处理程序 -->
    <beans:bean id="accessDeniedHandler" class="com.yws.security.handler.RequestAccessDeniedHandler">
        <beans:property name="errorPage" value="/WEB-INF/pages/error/403.html" />
    </beans:bean>

    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
    我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <beans:bean id="myFilter"
            class="com.yws.security.filter.MyFilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
        <beans:property name="securityMetadataSource" ref="securityMetadataSource" />
    </beans:bean>

    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="myUserDetailService">
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
        </authentication-provider>
    </authentication-manager>

    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
    <beans:bean id="myUserDetailService" class="com.yws.security.service.MyUserDetailServiceImpl" />

    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <beans:bean id="myAccessDecisionManagerBean"
            class="com.yws.security.filter.MyAccessDecisionManager">
    </beans:bean>

    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="securityMetadataSource"
            class="com.yws.security.filter.MyInvocationSecurityMetadataSource" />
</beans:beans>